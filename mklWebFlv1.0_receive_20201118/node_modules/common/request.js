
/*对请求进行构造*/
function request() {
    this.send = new send();
    this.javaParamPrefixName = 'jsonString';
    this.fs = require('fs');
    this.tool = require('./tool');
};

/*
*普通post请求
*参数objParam    object类型，包括属性如下：
*   url  必须
*   criteria(非必须) object或array类型
*   isParserResult  是否解析结果，默认true。为true时会对数据端的返回结果按照约定的规范进行解析
*   isParserCriteria 是否重新构造条件，默认true。为true时传给数据端的参数仅有一个jsonString
*   call(非必须)  function类型
*   fn 请求的方法名称，必须
*示例sendPost({
    criteria:{name:'111'},call:function(err,result){},fn:'getUser'
})
*/
request.prototype.sendPost = function (objParam) {
    var requestParam = objParam.isParserCriteria === false ? objParam.criteria : this.constructorParam(objParam.criteria);
    this.send.sendPost({
        isParserResult: objParam.isParserResult,
        criteria: requestParam,
        call: objParam.call,
        url: objParam.url
    });
};


/*get请求  参数释义同sendPost*/
request.prototype.sendGet = function (objParam) {
    var url = objParam.url;
    if (objParam.isParserCriteria !== false) {
        if (objParam.criteria) {
            var criteriaStr = this.constructorCriteriaStr(objParam.criteria);
            url += '?' + this.javaParamPrefixName + '=' + criteriaStr;
        }
    } else {
        url += '?';
        var cri = objParam.criteria || {};
        var urlParams = [];
        for (var cr in cri) {
            if (cri.hasOwnProperty(cr) == false) continue;
            urlParams.push(cr + '=' + cri[cr]);
        }
        url += urlParams.join('&');
    }

    this.send.sendGet({
        isParserResult: objParam.isParserResult,
        call: objParam.call,
        url: url
    });
};

/*上传，不管是图片还是非图片，都当作文件处理
*objParam:{criteria:{key:'文件的唯一名称，包括后缀及真实名称',path:''},call:function(){},url:'必须'}
*/
request.prototype.upload = function (objParam) {
    var criteria = objParam.criteria || {};

    var fileParamName = 'file';
    var realCriteria = {}
    realCriteria[fileParamName] =
        this.fs.readFileSync(criteria.path);

    this.send.upload({
        criteria: realCriteria,
        call: objParam.call,
        url: objParam.url
    });
};

/*根据文件id下载，不管是图片还是非图片，都当作文件处理
*objParam {criteria:{key:'文件的唯一名称，包括后缀及真实名称'},url:'必须',call:function(err,{fileName:'',path:''}){}}
*/
request.prototype.down = function (objParam) {
    var criteria = objParam.criteria || {};
    var key = criteria.key;
    var fileName = key.substr(30);
    objParam.fileName = fileName;
    this.send.down(objParam);
};



/*对请求参数进行处理*/
request.prototype.constructorParam = function (criteria) {
    var obj = {};
    var criteriaStr = this.constructorCriteriaStr(criteria);
    obj[this.javaParamPrefixName] = criteriaStr;
    return obj;
};

request.prototype.constructorCriteriaStr = function (criteria) {
    var cri = criteria || {};
    //var cri = criteria instanceof Array == true ? criteria : [criteria];
    return encodeURIComponent(JSON.stringify(cri));
};

module.exports = new request();




/*----------------------------发送请求并解析返回----------------------------*/
function send() {
    this.request = require('../public_nodejs/request');
    this.fs = require('fs');
    this.path = require('path');
};

/*
*普通post请求
*参数objParam    object类型，包括属性如下：
*   isParserResult   是否解析结果
*   criteria(非必须) object类型
*   call(非必须)  function类型
*   url 请求地址
*示例sendPost({
    criteria:{name:'111'},call:function(err,result){},fn:'getUser'
})
*/
send.prototype.sendPost = function (objParam) {
    var _this = this;
    _this.request.post({
        url: objParam.url,
        form: objParam.criteria,
        timeout: 1000 * 60 * 30
    }, function (err, httpResponse, body) {
        var obj = _this.parseResponse(err, body, httpResponse, objParam.isParserResult);
        if (typeof objParam.call === 'function')
            objParam.call(obj.err, obj.data);
    });
};


/*get请求  参数释义同sendPost*/
send.prototype.sendGet = function (objParam) {
    var _this = this;
    _this.request.get({
        url: objParam.url,
        timeout: 1000 * 60 * 30
    }, function (err, httpResponse, body) {
        var obj = _this.parseResponse(err, body, httpResponse, objParam.isParserResult);
        if (typeof objParam.call === 'function')
            objParam.call(obj.err, obj.data);
    });
};

/*上传
*/
send.prototype.upload = function (objParam) {
    var _this = this;
    _this.request({
        har: {
            url: objParam.url,
            method: 'POST',
            headers: [{
                name: 'content-type',
                value: 'application/octet-stream'
            }],
            postData: {
                mimeType: 'application/octet-stream',
                text: objParam.criteria.file
            }
        }
    }, function (err, httpResponse, body) {
        var obj = err ? {
            err: err
        } : (function () {
            var responseObj = !body ? {} : (function () {
                try {
                    return (typeof body == 'object' ? body : JSON.parse(body)) || {};
                } catch (e) {
                    return {};
                }
            })();
            responseObj.result = responseObj.Result;
            responseObj.reason = responseObj.ResultMsg;
            return _this.parseResponse(err, responseObj, httpResponse);
        })();
        if (typeof objParam.call == 'function') objParam.call(obj.err, obj.data);
    });
};

/*根据文件id下载
*/
send.prototype.down = function (objParam) {
    var _this = this;
    var fileName = objParam.fileName || '_temp';
    var bufArr = [];
    var isErr = false;
    var res;
    var req = _this.request.get({
        url: objParam.url,
        headers: {
            "content-type": "application/json",
            'cache-control': 'no-cache'
        }
    });
    req.on('error', function (e) {
        isErr = true;
        objParam.call('下载出错: ' + e.message);
    }).on('response', function (response) {
        res = response;
        if (res.statusCode !== 200 && res.statusCode !== 201) {
            isErr = true;
            return objParam.call('下载时连接错误，状态码：' + res.statusCode);
        }
    }).on('data', function (data) {
        bufArr.push(data);
    }).on('end', function () {
        if (isErr) return;
        objParam.call(null, {
            fileName: fileName,
            buffer: bufArr
        });
    });
};

send.prototype.parseResponse = function (responseErr, responseTxt, _httpInfo, isParse) {
    if (responseErr) return { err: responseErr };
    if (_httpInfo.statusCode != 200) return { err: responseTxt || '后台返回异常' };
    isParse = isParse === false ? false : true;
    if (!isParse) return { data: responseTxt };
    var responseObj = {};
    try {
        responseObj = (typeof responseTxt == 'object' ? responseTxt : JSON.parse(responseTxt)) || {};
    } catch (e) {
        responseObj = {};
    } finally {
        var err = null, data = null;
        var errStr = null;
        if (responseObj.result !== 'success') errStr = responseObj.reason || responseObj.result || '后台返回异常';
        return { err: errStr, data: responseObj.content };
    }
};