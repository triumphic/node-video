/*根据请求进行转换*/
function requestBefore() {
    this.responseTool = require('./responseTool');
    this.path = require('path');
    this.fs = require('fs');
    this.requestTypes = {
        get: 'get', post: 'post',
        upload: 'upload', down: 'down',
        pdownloadByParam: 'pdownloadByParam'
    };
    this.tool = require('./tool');
    this.request = require('./request');
};

requestBefore.prototype = {
    //登录
    plogin: function (req, res, next, requestType, objParam) {
        var _this = this;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            if (err) console.error('登录err：' + (err.stack || JSON.stringify(err)));
            var obj = (result || [])[0] || {};

            var isLogin = obj.resultType === '1' ? true : false;
            var loginFailedType = err ? 1 : obj.resultType === '2' ? 2 : obj.resultType === '3' ? 3 : obj.resultType === '4' ? 4 : 1;

            obj.resultType = null;
            delete obj.resultType;
            var user = _this.tool.parserUser(obj, req);

            _this.responseTool.loginResponse(req, res, {
                isLogin: isLogin,
                loginFailedType: loginFailedType,
                puser: user
            });
        });
    },
    //获取数据
    pquery: function (req, res, next, requestType, objParam) {
        var _this = this;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            var root = _mapConfig[objParam.fn];
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return _this.responseTool.sendServerException(res);
            }
            var clientResult = _this.tool.parseResult(result, objParam.fn);
            if (!clientResult)
                return _this.responseTool.sendServerException(res, '请检查' + pconst.mapFileName + '文件是否有' + objParam.fn + '请求的配置');
            _this.responseTool.sendSuccess(res, clientResult);
        });
    },
    //根据ID下载文件
    pfiledownload: function (req, res, next, requestType, objParam) {
        var _this = this;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            result = result || {};
            var bufferArr = result.buffer;
            if (err || !bufferArr) {
                console.error('文件下载失败：' + (err.stack || JSON.stringify(err)));
                return _this.responseTool.sendServerException(res);
            }

            var fileName = result.fileName;
            var buffer = Buffer.concat(bufferArr);
            var path = _this.path.join(_uploadPath, Math.random() + '' + new Date().getTime());
            _this.fs.writeFile(path, buffer, function (err) {
                if (err) {
                    console.error("下载时文件写入 出错" + (err.stack || JSON.stringify(err)));
                    return _this.responseTool.sendServerException(res);
                }
                res.download(path, encodeURI(fileName));
            });
        });
    },
    //数据更新
    pupdate: function (req, res, next, requestType, objParam) {
        var _this = this;
        var tempParam = createParam.call(_this, req, objParam);
        var criteria = tempParam.criteria || {};
        if (criteria.pwithAttachments == true) {        //保存时先进行附件上传操作
            var fileCount = 0;
            var alreadyFileCount = 0;
            var isUploadError = false, isValidError = false;
            parseAttachment([criteria]);
            if (fileCount == alreadyFileCount) _sendStart();
        }
        else _sendStart();

        //循环解析参数，以便深层次的逐一上传文件
        function parseAttachment(dataParamArr) {
            for (var x = 0; x < dataParamArr.length; x++) {
                var currDataParam = dataParamArr[x];
                for (var proName in currDataParam) {
                    if (currDataParam.hasOwnProperty(proName) == false) continue;
                    var proValue = currDataParam[proName];
                    if (proName == pconst.attachments) {
                        var attachments = proValue instanceof Array == true ? proValue : [proValue];
                        fileCount += attachments.length;
                        for (var y = 0; y < attachments.length; y++) {
                            var currAttachment = attachments[y];
                            var oldResource = _this.path.basename(currAttachment.path);
                            var pwIndex = oldResource.indexOf('?');
                            if (pwIndex > -1)
                                oldResource = oldResource.substring(0, pwIndex);
                            currAttachment.path = oldResource;
                            if (currAttachment.isNewFile != false) {
                                var tempName = currAttachment.path;
                                var basePath = _this.path.join(_uploadPath, tempName);
                                if (!_this.fs.existsSync(basePath)) {
                                    console.error('文件' + basePath + '不存在');
                                    isValidError = true;
                                    return _this.responseTool.sendServerException(res);
                                }

                                //var subdirectory = currAttachment.subdirectory.indexOf('/') == 0 ?
                                //                   currAttachment.subdirectory : '/' + currAttachment.subdirectory;
                                //var uploadInfo = {
                                //    path: basePath,
                                //    fileName: currAttachment.fileName,
                                //    fileSuffix: currAttachment.fileSuffix,
                                //    subdirectory: subdirectory
                                //};


                                var time = new Date().getTime();
                                var randomStr = (Math.random() + '').substr(2);
                                var key = time + randomStr;
                                key = key.substr(0, 30);
                                var middle = 30 - key.length;
                                for (var i = 0; i < middle; i++) {
                                    key += '1';
                                }
                                key += (currAttachment.fileName || '') + '.' + (currAttachment.fileSuffix || '');

                                var uploadInfo = {
                                    path: basePath,
                                    //fileName: currAttachment.fileName,
                                    //fileSuffix: currAttachment.fileSuffix,
                                    //fileType: currAttachment.fileType,
                                    key: key
                                };

                                (function (attachment, oldAttachment, oldDataParam, _key) {
                                    var uploadObjParam = {
                                        data: attachment,
                                        fn: pconst.requestType.pupload
                                    };
                                    startSendBefore.call(_this, req, _this.requestTypes.upload, uploadObjParam, null, function (uploadErr, uploadResult) {
                                        if (isValidError || isUploadError) return;

                                        if (uploadErr) {
                                            console.error('文件上传失败：' + (uploadErr.stack || JSON.stringify(uploadErr)));
                                            isUploadError = true;
                                            return _this.responseTool.sendServerException(res);
                                        }
                                        ++alreadyFileCount;

                                        var fileInfos = uploadResult || [];
                                        var newProName = oldAttachment.toPro;
                                        if (oldDataParam[newProName] == null) oldDataParam[newProName] = [];
                                        oldDataParam[newProName].push(_key);

                                        if (fileCount == alreadyFileCount) _sendStart();
                                    });
                                })(uploadInfo, currAttachment, currDataParam, key);
                            } else {
                                ++alreadyFileCount;
                                var newProName = currAttachment.toPro;
                                if (currDataParam[newProName] == null) currDataParam[newProName] = [];
                                var ooldPath = psecret.parser(currAttachment.path);
                                currDataParam[newProName].push(ooldPath);
                            }
                        }
                        delete currDataParam[proName];
                        continue;
                    }
                    if (proValue instanceof Object == true) {
                        arguments.callee([proValue]);
                        continue;
                    }
                    if (proValue instanceof Array == true) {
                        arguments.callee(proValue);
                        continue;
                    }
                }
            }
        };

        function _sendStart() {
            delete criteria.pwithAttachments;
            var updateObjParam = {
                data: criteria,
                fn: tempParam.fn
            };
            startSendBefore.call(_this, req, _this.requestTypes.post, updateObjParam, null, function (updateErr, updateResult) {
                if (updateErr) {
                    console.error(tempParam.fn + '执行失败：' + (updateErr.stack || JSON.stringify(updateErr)));
                    return _this.responseTool.sendServerException(res);
                }
                var objResult = (updateResult || [])[0];
                _this.responseTool.sendSuccess(res, objResult);
            });
        }
    },
    /*
    *自定义get请求，参数为object，包含属性如下：
    *   url
    *   fn 请求的接口名称
    *   criteria 请求附带的参数
    *   isUpdate   是否是更新操作，数据的新增、修改、删除均为更新，默认false
    *   isParserResult  是否解析结果(只是把content提出来)，默认true
    *   isToDataMap     是否对应datamap，对content内的数据依据dataMap进行转换  默认true
    *   isParserCriteria 是否对请求参数进行处理，默认true
    *   call       请求的回调，两个参数err,result
    */
    sendGet: function (objParam) {
        var _this = this;
        var requestType = objParam.isUpdate == true ? this.requestTypes.post : this.requestTypes.get;
        startSendBefore.call(this, {}, requestType, {
            data: objParam.criteria, fn: objParam.fn, isParserResult: objParam.isParserResult, isParserCriteria: objParam.isParserCriteria
        }, objParam.url, function (err, result) {
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return typeof objParam.call == 'function' ? objParam.call(err) : '';
            }
            if (objParam.isToDataMap !== false)
                customSendParse.call(_this, objParam.fn, objParam.isUpdate, result, objParam.call);
            else typeof objParam.call == 'function' ? objParam.call(err, result) : '';
        });
    },
    /*自定义post请求，参数同sendGet*/
    sendPost: function (objParam) {
        var _this = this;
        startSendBefore.call(this, {}, this.requestTypes.post, {
            data: objParam.criteria, fn: objParam.fn, isParserResult: objParam.isParserResult, isParserCriteria: objParam.isParserCriteria
        }, objParam.url, function (err, result) {
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return typeof objParam.call == 'function' ? objParam.call(err) : '';
            }
            if (objParam.isParserResult !== false)
                customSendParse.call(_this, objParam.fn, objParam.isUpdate, result, objParam.call);
            else typeof objParam.call == 'function' ? objParam.call(err, result) : '';
        });
    }
};

module.exports = new requestBefore();

function createParam(req, objParam) {
    var _this = this;
    var param = objParam.data || {};
    var user = JSON.parse(JSON.stringify(!req.session ? {} : req.session[_this.tool.userSessionName] || {}));
    user.projects = null;
    user.authorizations = null;
    user.authors = null;
    user.authorObj = null;
    delete user.projects;
    delete user.authorizations;
    delete user.authors;
    delete user.authorObj;
    var fn = objParam.fn || '';
    //带*号的 说明是从原设备设施迁移过来的
    var isMovedUrl = fn.indexOf('*');
    if (isMovedUrl > -1) fn = fn.replace('*', '_');
    if (param instanceof Array == true) {
        for (var i = 0; i < param.length; i++) {
            if (!param[i][_this.tool.userSessionName]) param[i][_this.tool.userSessionName] = user;
            if (isMovedUrl > -1) param[i].user_id = user.userId;
        }
    } else {
        if (!param[_this.tool.userSessionName]) param[_this.tool.userSessionName] = user;
        if (isMovedUrl > -1) param.user_id = user.userId;
    }
    return { fn: fn, criteria: param };
};

function startSendBefore(req, requestType, objParam, url, call) {
    var tempParam = createParam.call(this, req, objParam);

    var _url;
    switch (requestType) {
        case this.requestTypes.upload:
            var key = encodeURIComponent(tempParam.criteria.key);
            _url = url || (_config.fileServiceUrl + 'systemId=' + this.tool.systemCode + '&secret=' + this.tool.systemSecret + '&key=' + key);
            break;
        case this.requestTypes.down:
            var key = encodeURIComponent(tempParam.criteria.key);
            _url = url || (_config.downFileServiceUrl + '?' + 'systemId=' + this.tool.systemCode + '&key=' + key);
            break;
        default:
            var tempObj = { url: url, fn: tempParam.fn };
            tempObj[this.tool.configServiceParName] = tempParam.criteria[this.tool.configServiceParName];
            _url = this.tool.constructorServiceUrl(tempObj);
            tempParam.criteria[this.tool.configServiceParName] = null;
            delete tempParam.criteria[this.tool.configServiceParName];
            break;
    }

    var par = {
        url: _url,
        criteria: tempParam.criteria,
        isParserResult: objParam.isParserResult,
        isParserCriteria: objParam.isParserCriteria,
        fn: tempParam.fn,
        call: call
    };
    requestType == this.requestTypes.get ? this.request.sendGet(par) :
        requestType == this.requestTypes.upload ? this.request.upload(par) :
            requestType == this.requestTypes.down ? this.request.down(par) :
                this.request.sendPost(par);
};

function customSendParse(fn, isUpdate, result, call) {
    if (isUpdate == true) {
        return call(null, result);
    }
    var clientResult = this.tool.parseResult(result, fn);
    call(null, clientResult);
};