function startAfterExecute(call) {
    var path = require('path');
    var rc = require('./request');
    var extendDirName = path.join(_config.serviceCommonLibUrl || commonLibUrl, 'scripts/extend');
    var toolDirName = path.join(_config.serviceCommonLibUrl || commonLibUrl, 'scripts/tool');
    var errInfo = '';

    var extendNameArr = ['Array', 'Date', 'Math', 'Number', 'String'];
    for (var i = 0; i < extendNameArr.length; i++) {
        (function (extendName) {
            rc.sendGet({
                url: parserUrl(path.join(extendDirName, extendName + '.js')),
                isParserResult: false,
                call: function (err, result) {
                    if (err) return errInfo = err, console.error('加载' + extendName + '错误：' + (err.stack || JSON.stringify(err)));
                    eval(result);
                }
            });
        })(extendNameArr[i]);
    }

    var toolNameArr = ['pconst', 'psecret', 'ptool'];
    var count = 0;
    for (i = 0; i < toolNameArr.length; i++) {
        (function (toolName) {
            rc.sendGet({
                url: parserUrl(path.join(toolDirName, toolName + '.js')),
                isParserResult: false,
                call: function (err, result) {
                    ++count;
                    if (err) return errInfo = err, console.error('加载' + toolName + '错误：' + (err.stack || JSON.stringify(err)));
                    this[toolName] = eval(result);
                    global[toolName] = this[toolName];
                }
            });
        })(toolNameArr[i]);
    }

    function parserUrl(url) {
        return url.replace(/http:\//g, 'http://').replace(/http:\\/g, 'http://').replace(/\\/g, '/');
    };

    var timeInterval = setInterval(function () {
        if (count !== toolNameArr.length) return;
        clearInterval(timeInterval);
        typeof call == 'function' ? call(errInfo) : '';
    }, 100);
};

module.exports = startAfterExecute;