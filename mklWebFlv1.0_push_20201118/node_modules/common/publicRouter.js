/*
*关于路由拦截时的用户判断：
*   1、对于ajax请求，要求客户端全部使用pajax，这样，路由拦截器在监测到用户不存在时将通知客户端跳转到登录页面
*   2、对于非ajax请求，如页面跳转类的；由于子系统的本页面内的跳转，路由没法通知客户端进行顶级页面的跳转，所以非ajax的请求均返回无权限页面
*/
function createRoute(app, isLogin, tempDirName) {
    var path = require('path');
    var realRestClient = require('./executeRequest');
    var equieRestClient = require('./_restClient');
    var responseTool = require('./responseTool');
    var tool = require('./tool');
    var urlTool = require('url');

    //解决eot、woff、ttf、svg跨域不能访问的问题
    app.all(/.+\.(eot|woff|ttf|svg)/g, function (req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        next();
    });

    /*不具有登录页面的F也有session*/
    app.all('*', function (req, res, next) {
        
        next();

        function noAccess() {
            /*ajax请求，因为jquery.ajax不能对后台的跳转响应做出处理，所以需结合pajax，并且后台返回302的状态码来进行跳转*/
            if (req.xhr) {
                var frameUrl = _config.frameUrl;
                frameUrl += (frameUrl.lastIndexOf('/') == frameUrl.length - 1 ? '' : '/') + 'lv';
                responseTool.sendRedirect(res, frameUrl);
            } else {
                var currHost = req.headers.host;
                var frameHost = urlTool.parse(_config.frameUrl).host;
                if (currHost === frameHost)
                    responseTool.renderLogin(res);
                else
                    responseTool.sendDecline(res, '无权访问，请进行登录');
            }
        };
    });

    // app.get('/', function (req, res, next) {
    //     responseTool.renderMain(res, req.session[tool.userSessionName]);
    // });

    if (typeof pconst != 'undefined') {
        app.get('/lv', function (req, res) {
            responseTool.renderLogin(res);
        });

        app.get('/' + pconst.requestType.noaccess, function (req, res) {
            responseTool.sendDecline(res, '无权访问，请联系管理员配置功能模块访问权限！');
        });

        /*文件上传，只是临时保存在网站应用程序服务器上*/
        app.post('/' + pconst.requestType.pupload, function (req, res, next) {
            function errSend(err) {
                console.error('文件上传错误：' + (err.stack || JSON.stringify(err)));
                return responseTool.sendServerException(res);
            }
            if (req.files) {
                var proArr = Object.getOwnPropertyNames(req.files || {});
                var file = req.files[proArr[0]];

                var filePath = file.path;
                var fileName = file.name || '';
                var name = fileName.substring(0, fileName.lastIndexOf('.'));
                var suffix = fileName.substring(fileName.lastIndexOf('.') + 1);

                var tempName = path.basename(filePath);
                var showUrl = '/' + tempDirName + '/' + tempName;
                responseTool.sendSuccess(res, { showUrl: showUrl, name: name, suffix: suffix, result: 1 });
            }
            else {
                errSend('文件丢失');
            }
        });

        /*附件下载，参数
        *id 必须，附件对应的资源ID
        */
        app.get('/' + pconst.requestType.pdownload + '/:id', function (req, res, next) {
            var id = psecret.parser(req.params.id);
            if (!id) return responseTool.sendDecline(res, '文件标识符不正确');
            req.query = {
                data: { key: id },
                fn: pconst.requestType.pdownload,
                _ptype: pconst.requestType.pdownload
            };
            parseRequest(req, res, next, realRestClient.requestTypes.down);
        });

        /*根据不同参数来进行附件下载
        */
        app.post('/' + pconst.requestType.pdownloadByParam, function (req, res, next) {
            var paramStr = psecret.parser(req.body.data);
            if (!paramStr) return responseTool.sendDecline(res, '参数不正确');
            var paramObj;
            try {
                paramObj = JSON.parse(paramStr);
            } catch (e) { return responseTool.sendDecline(res, '参数不正确'); }
            var fn = paramObj.url;
            delete paramObj.url;

            /*设备设施的是数据端直接返回流
            *---------------------------临时使用indexOf('/')判断
            */
            if (fn.indexOf('/') > -1) {
                req.body = {
                    data: paramObj,
                    fn: fn,
                    _ptype: pconst.requestType.pdownloadByParam
                };
                parseRequest(req, res, next, realRestClient.requestTypes.pdownloadByParam);
            } else {
                var otherParamObj = getOtherParam(req);
                paramObj.project_id = otherParamObj.project_id;
                /*非设备设施：数据端返回key
                */
                realRestClient.sendPost({
                    fn: fn,
                    isParserResult: true,
                    isParserCriteria: true,
                    criteria: paramObj,
                    call: function (err, result) {
                        if (err) return responseTool.sendServerException(res);
                        result = (result || [])[0] || {};
                        if (!result.resourceId) return responseTool.sendServerException(res, '无效的文件标识符');
                        var downUrl = tool.toParseFileLink(result.resourceId);
                        res.redirect(downUrl);
                    }
                });
            }
        });

        /*登录*/
        app.post('/' + pconst.requestType.plogin, function (req, res, next) {
            req.body = {
                data: {
                    loginName: req.body.name,
                    password: req.body.pass,
                    loginDevice: 'PC'
                },
                fn: 'loginUserService',
                _ptype: pconst.requestType.plogin
            };
            parseRequest(req, res, next, realRestClient.requestTypes.post);
        });

        /*注销*/
        app.get('/' + pconst.requestType.ploginOut, function (req, res, next) {
            realRestClient.sendPost({
                fn: 'loginoutUserService',
                criteria: {
                    puser: { userId: (req.session[tool.userSessionName] || {}).userId, loginDevice: 'PC' }
                },
                call: function (err, result) {
                    if (err) return console.error('退出发生错误：' + (err.stack || JSON.stringify(err)));
                    console.log('exit success');
                }
            });

            res.clearCookie(tool.loginTimeName);
            res.clearCookie(tool.ticketName);
            req.session[tool.userSessionName] = null;
            req.session[tool.loginTimeName] = null;
            req.session.destroy();
            responseTool.redirectMain(res);
        });

        /*get请求*/
        app.get(pconst.requestUrl, function (req, res, next) {
            parseRequest(req, res, next, realRestClient.requestTypes.get);
        });

        /*post请求*/
        app.post(pconst.requestUrl, function (req, res, next) {
            parseRequest(req, res, next, realRestClient.requestTypes.post);
        });

        /*get请求*/
        app.get(pconst.requestNoValidUrl, function (req, res, next) {
            parseRequest(req, res, next, realRestClient.requestTypes.get);
        });

        /*post请求*/
        app.post(pconst.requestNoValidUrl, function (req, res, next) {
            parseRequest(req, res, next, realRestClient.requestTypes.post);
        });

    }
    //请求中转
    function parseRequest(req, res, next, requestType) {
        var otherParamObj = getOtherParam(req);
        var restClient = realRestClient;
        var requestParamFather = requestType == realRestClient.requestTypes.get || requestType == realRestClient.requestTypes.down ? 'query' : 'body';
        var objParam = req[requestParamFather];
        objParam.data = objParam.data || {};
        objParam.data.project_id = objParam.data.project_id || otherParamObj.project_id;
        var ptype = objParam._ptype;
        /**---------------------------临时使用indexOf('/')判断*/
        var requestObj = objParam.fn.indexOf('/') > -1 ? equieRestClient : restClient;
        if (typeof requestObj[ptype] == 'function') return requestObj[ptype](req, res, next, requestType, objParam);
        responseTool.sendDecline(res, '无效的请求');
    };

    //获取额外的参数，现在只有项目ID
    function getOtherParam(req) {
        var newObj = {};
        var referer = (req.headers || {}).referer || '';
        if (!referer) return newObj;
        var paramStr = referer.split('?')[1] || '';
        if (!paramStr) return newObj;
        var paramArr = paramStr.split('&');
        for (var i = 0; i < paramArr.length; i++) {
            var ppArr = paramArr[i].split('=');

            switch (ppArr[0]) {
                case tool.projectIdName:
                    newObj.project_id = psecret.parser(ppArr[1]) || '';
                    break;
            }
        }
        return newObj;
    };
};

module.exports = createRoute;